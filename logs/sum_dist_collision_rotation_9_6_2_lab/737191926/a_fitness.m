function final_data = a_fitness(...
    weights, ...
    map, ...
    net_layout, ...
    robot, ...
    body, ...
    start_positions, ...
    target_positions, ...
    init_angles, ...
    step_count, ...
    cmap, ...
    max_distance)


    global logger
    
    pop_size = size(weights, 1);
    final_data = {};
    final_data.fits = zeros(1, pop_size);
    final_data.distances = zeros(1, pop_size);
    final_data.collisions = zeros(1, pop_size);
    final_data.dist_sum = zeros(1, pop_size);
    final_data.goal_rotation = zeros(1, pop_size);
    
    for path = 1:size(start_positions, 2)
        start = start_positions(1, path, :);
        target = target_positions(1, path, :);
        
        data = a_fitness_path(...
            weights, ...
            map, ...
            net_layout, ...
            robot, ...
            body, ...
            start, ...
            target, ...
            init_angles, ...
            step_count, ...
            cmap, ...
            max_distance);
        
        logger.debug(sprintf('Path %d:', path));
        [best_fit, best_fit_idx] = min(data.fits, [], 2);
        logger.debug(sprintf('Best Fit: %f  Distance: %f  Collision: %d   Dist sum: %f   Goal rotation: %f', ...
            best_fit, data.distances(best_fit_idx), data.collisions(best_fit_idx), ...
            data.dist_sum(best_fit_idx), data.goal_rotation(best_fit_idx)));
        
        final_data.fits = final_data.fits + data.fits;
        final_data.distances = final_data.distances + data.distances;
        final_data.collisions = final_data.collisions + data.collisions;
        final_data.dist_sum = final_data.dist_sum + data.dist_sum;
        final_data.goal_rotation = final_data.goal_rotation + data.goal_rotation;
    end
end

